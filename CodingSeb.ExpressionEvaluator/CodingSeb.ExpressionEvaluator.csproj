<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <AssemblyTitle>CodingSeb.ExpressionEvaluator</AssemblyTitle>
    <Company>Coding Seb</Company>
    <Product>CodingSeb.ExpressionEvaluator</Product>
    <Description>A Simple Math and Pseudo C# Expression Evaluator in One C# File. And from version 1.2.0 can execute small C# like scripts</Description>
    <Copyright>Copyright © Coding Seb 2017</Copyright>
    <Version>1.3.3.0</Version>
    <AssemblyVersion>1.3.3.0</AssemblyVersion>
    <FileVersion>1.3.3.0</FileVersion>
    <OutputPath>bin\$(Configuration)\</OutputPath>
    <Authors>Coding Seb</Authors>
    <PackageId>CodingSeb.ExpressionEvaluator</PackageId>
    <PackageLicenseUrl>https://github.com/codingseb/ExpressionEvaluator/blob/master/LICENSE.md</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/codingseb/ExpressionEvaluator</PackageProjectUrl>
    <PackageTags>evaluation math expression-evaluator expression parser eval evaluate fluid C# calculation execute script</PackageTags>
    <TargetFrameworks>net45;netstandard2.0</TargetFrameworks>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageIconUrl>https://github.com/codingseb/ExpressionEvaluator/blob/master/Icon.png?raw=true</PackageIconUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageReleaseNotes>Main improvements
* Support &lt;&gt; syntax for specify types of generics
* Support of creation initializers for collections, dictionnaries and objects

Here a few examples of what this version allow to do :

new List&lt;string&gt;() { "text1", "text2" }
new Dictionnary&lt;string, int&gt; { {"seven", 7}, {"nine", 9}}
new Dictionnary&lt;string, int&gt; { ["seven"]= 7, ["nine"] = 9}
new MyObject() { MyStringProperty = "A value", MyIntProperty  = 8}

Other changes
* Add ListOfType Standard function
* A reference on the current evaluator added in VariableEvaluationEventArg and FunctionEvaluationEventArg
* Small improvement of the Indexing []</PackageReleaseNotes>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugType>full</DebugType>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net45|AnyCPU'">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.CSharp" Version="4.5.0" />
    <PackageReference Include="System.Dynamic.Runtime" Version="4.3.0" />
  </ItemGroup>
</Project>
